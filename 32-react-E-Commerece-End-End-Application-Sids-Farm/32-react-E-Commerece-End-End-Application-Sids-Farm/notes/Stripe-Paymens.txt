Stripe payments using React JS and Node
------------------------------------------
-> login to stripe.com and get private and public keys 


-> Node JS Backend
------------------
-> install the package stripe

-> payments route.js 
--------------------
const express = require('express');
const {tokenVerifierMiddleware} = require("../middlewares/tokenVerifier.middleware");
const stripe = require('stripe')('your-own-secret-key')

const paymentRouter = express.Router();

paymentRouter.post('/make-payment', tokenVerifierMiddleware, async (req, res) => {
    try {
        const {amount, currency} = req.body;
        const paymentIntent = await stripe.paymentIntents.create({
            amount,
            currency,
        });
        return res.json({clientSecret: paymentIntent.client_secret});
    } catch (error) {
        res.status(500).json({error: error.message});
    }
});

module.exports = {
    paymentRouter
}

React JS Client 
----------------

-> install the packages
  -> @stripe/react-stripe-js @stripe/stripe-js

-> CheckoutPage.jsx
--------------------
const [open, setOpen] = useState(false);
    const [openPaymentsModal, setOpenPaymentsModel] = useState(false);

// online payment click event 
if (paymentOption === PAYMENT_OPTIONS.ONLINE_PAYMENT) {
            localStorage.setItem('order', JSON.stringify({
                products: cartItems,
                tax: tax,
                total: total,
            }));
            setOpenPaymentsModel(true);
            const moneyObj = {
                amount: (tax + total) * 100,
                currency: 'inr'
            }
            dispatch(orderActions.makePayment({
                moneyObj: moneyObj
            }));
        }		
};		

// in return statements

{
	openPaymentsModal &&
                <PaymentsModal isOpen={openPaymentsModal} setOpen={setOpenPaymentsModel}/>
}

PaymentsModal.jsx 
-----------------
import React from 'react';
import {loadStripe} from "@stripe/stripe-js";
import {Elements} from "@stripe/react-stripe-js";
import PaymentsForm from "./PaymentsForm.jsx";
import {useSelector} from "react-redux";
import {selectClientSecret} from "../redux/order/order.slice.js";

const stripePromise = loadStripe('your-own-public-key');

const PaymentsModal = ({isOpen, setOpen}) => {
    const clientSecretCode = useSelector(selectClientSecret);
    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-40">
            <div className="bg-white rounded-lg shadow-lg w-full max-w-md p-6">
                {
                    clientSecretCode &&
                    <div className="flex items-center justify-between w-full">
                        <Elements stripe={stripePromise} options={{clientSecret: clientSecretCode}}>
                            <PaymentsForm clientSecret={clientSecretCode}/>
                        </Elements>
                    </div>

                }
            </div>
        </div>
    );
};

export default PaymentsModal;

PaymentsForm.jsx 
----------------
import React, {useState} from "react";
import {useStripe, useElements, PaymentElement} from "@stripe/react-stripe-js";
import {loadStripe} from "@stripe/stripe-js";
import {ToastMessageUtil} from "../util/ToastMessageUtil.js";

const stripePromise = loadStripe("your-own-public-key");

const PaymentsForm = () => {
    const stripe = useStripe();
    const elements = useElements();
    const [message, setMessage] = useState(null);
    const [isLoading, setIsLoading] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!stripe || !elements) return;
        setIsLoading(true);

        const {error, paymentIntent} = await stripe.confirmPayment({
            elements,
            confirmParams: {return_url: "http://localhost:5173/payments/payment-success"},
        });

        if (error) {
            setMessage(error.message);
        } else if (paymentIntent && paymentIntent.status === "succeeded") {
            setMessage("Payment successful!");
            ToastMessageUtil.showToastMessageSuccess("Payment successful!");
        }
        setIsLoading(false);
    };

    return (
        <div className="w-full">
            <form onSubmit={handleSubmit} className="p-4 border rounded-md">
                <PaymentElement/>
                <button type="submit" disabled={!stripe || isLoading}
                        className="bg-blue-500 px-4 py-2 rounded-lg text-white mt-3">
                    {isLoading ? "Processing..." : "Pay Now"}
                </button>
                {message && <p className="text-red-500 mt-2">{message}</p>}
            </form>
        </div>
    );
};
export default PaymentsForm;

Configure the Success page Url with a component 
------------------------------------------------
http://localhost:5173/payments/payment-success

PaymentSuccess.jsx
------------------
import React, {useEffect} from 'react';
import {useDispatch, useSelector} from "react-redux";
import {orderActions, orderFeatureKey, selectOrderPlaced} from "../redux/order/order.slice.js";
import {PAYMENT_OPTIONS} from "../constants/constants.js";
import {Link} from "react-router-dom";
import Navbar from "./navbar.jsx";

const orderInfo = JSON.parse(localStorage.getItem('order'));
const PaymentSuccess = (props) => {
    const dispatch = useDispatch();

    const {order} = useSelector(state => state[orderFeatureKey]);
    const isOrderPlaced = useSelector(selectOrderPlaced);

    useEffect(() => {
        if (orderInfo) {
            dispatch(orderActions.placeOrder({
                order: {
                    ...orderInfo,
                    paymentOption: PAYMENT_OPTIONS.ONLINE_PAYMENT
                }
            }));
        }
    }, [orderInfo]);

    useEffect(() => {
        if (isOrderPlaced) {
            dispatch(orderActions.resetClientSecret());
            dispatch(orderActions.resetPlaceOrder());
            localStorage.removeItem('order');
        }
    }, [isOrderPlaced]);

    if (!orderInfo) {
        return (
            <>
                <Navbar/>
                <div className="flex justify-center text-center items-center m-5">

                    <div>
                        <p className="text-red-600 text-xl">You are not authorized to access this page.</p>
                        <button className="bg-blue-500 text-white px-4 py-2 rounded-lg mt-3"
                                onClick={() => navigate("/home")}>Back to Home
                        </button>
                    </div>
                </div>
            </>
        )
    }

    return (
        <>
            <Navbar/>
            {
                <div className="bg-gray-100 flex items-center justify-center h-screen">
                    <div className="bg-white shadow-lg rounded-2xl p-8 text-center max-w-md">
                        <div
                            className="flex items-center justify-center w-16 h-16 bg-green-100 text-green-600 rounded-full mx-auto">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10" fill="none"
                                 viewBox="0 0 24 24"
                                 stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"
                                      d="M5 13l4 4L19 7"/>
                            </svg>
                        </div>
                        <h1 className="text-2xl font-semibold text-gray-800 mt-4">Payment Successful!</h1>
                        <p className="text-gray-600 mt-2">Thank you for your purchase. Your order has been
                            confirmed.</p>

                        {
                            order && <div className="mt-6 border-t pt-4 text-gray-700">
                                <p><strong>Order ID:</strong> {order?._id}</p>
                            </div>
                        }

                        <div className="mt-6 flex justify-center space-x-4">
                            <Link to="/home" className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Go
                                to
                                Home</Link>
                            <Link to="/orders/me"
                                  className="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400">View
                                Orders</Link>
                        </div>
                    </div>
                </div>
            }
        </>
    )
}
export default PaymentSuccess;


Redux Configuration
--------------------

slice 
------

const initialState = {
    loading: false,
    error: null,
    clientSecret: null,
}

/**
         * make Payment
         */
        makePayment: (state, action) => {
            state.loading = true;
        },
        makePaymentSuccess: (state, action) => {
            state.loading = false;
            state.clientSecret = action.payload.clientSecret;
        },
        resetClientSecret: (state, action) => {
            state.clientSecret = null;
        },
        makePaymentFailure: (state, action) => {
            state.loading = false;
            ToastMessageUtil.showToastMessageError('Payment is Failed');
            state.error = action.payload;
        }
		
		
export const selectClientSecret = state => state[orderFeatureKey].clientSecret;


Saga
-----
function* makePaymentAction(action) {
    try {
        if (AxiosUtil.setTokenToHeader()) {
            const response = yield call(PaymentService.makePayment, action.payload.moneyObj);
            if (response.status === 200) {
                yield put(orderActions.makePaymentSuccess(response.data)); // call slice for success
            } else {
                yield put(orderActions.makePaymentFailure(response.data));
            }
        }
    } catch (error) {
        yield put(orderActions.makePaymentFailure(error.response.data)); // call slice for failure
    }
}
		
    yield takeLatest(orderActions.makePayment, makePaymentAction)
	
	
Service
--------
import axios from "axios";

export class PaymentService {
    static url = "http://localhost:9000/api/payments";

    static makePayment(moneyObj) {
        return axios.post(`${PaymentService.url}/make-payment`, moneyObj);
    }
}	




		
		